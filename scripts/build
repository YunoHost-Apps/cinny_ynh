#!/bin/bash

#=================================================
# THIS BUILD SCRIPT RESOURCES USAGE:
# ~1.5GB disk space and 4GB RAM. 
#=================================================

set -x

upstream_owner="cinnyapp"
upstream_repo="cinny"
upstream_branch="main"
ynh_owner="oleole39"
ynh_repo="cinny_ynh"
build_node_version=20
source_type="release" # 'commit' or 'release'
default_build_folder="dist" # often 'dist'

#Fill with Github Personal Token to upload release after build (not required if build is part of a Github workflow) - https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens
gh_personal_token=""

#=================================================
# DOWNLOAD AND EXTRACT SOURCE
#=================================================
full_upstream_path="${upstream_owner}/${upstream_repo}"
if [[ $source_type == "release" ]]; then
    last_upstream_version=$(curl --silent "https://api.github.com/repos/${full_upstream_path}/releases/latest" | grep -Po "(?<=\"tag_name\": \").*(?=\")") #e.g. v3.2.0 (but format is manually defined by repo upstream authors and could be anything)
    download_url="https://api.github.com/repos/${full_upstream_path}/tarball/${last_upstream_version}"
    build_folder="${upstream_repo}_${last_upstream_version}" #e.g. jsoncrack.com_v3.2.0
    release_version="${last_upstream_version}"
else
    last_upstream_version=$(curl --silent "https://api.github.com/repos/${full_upstream_path}/commits/${upstream_branch}" | grep -Po "(?<=\"sha\": \").*(?=\")" | head -n 1) #e.g. d5f9bfc7fba1f1908863390f16ba28589d84a7d5
    last_upstream_version_short=${last_upstream_version:0:8}
    last_date_tag=$(curl --silent "https://api.github.com/repos/${full_upstream_path}/commits/${upstream_branch}" | grep -Po "(?<=\"verified_at\": \").*(?=\")" | head -n 1) #e.g. 2024-11-19T18:37:03Z
    last_date_tag_short=$(echo ${last_date_tag:0:10} | sed 's/-/./g') #e.g. 2024.11.19
    download_url="https://github.com/${full_upstream_path}/archive/${last_upstream_version}.tar.gz"
    build_folder="${upstream_repo}_v${last_date_tag_short}-${last_upstream_version_short}" #e.g. jsoncrack.com_v2024.11.19-d5f9bfc7
    release_version="${build_folder#${upstream_repo}_}"
fi
curl -LJ $download_url --output "${build_folder}.tar.gz"
mkdir "$build_folder"
tar --strip-components=1 -xvf "${build_folder}.tar.gz" -C "./${build_folder}/"

# Adapt for YNH context
pushd "$build_folder"
    # Prepare $domain$path replacement
    sed -i "s|base: '/|base: '/__YNH_SUBDIR_PATH__/|g" "./build.config.ts"
    #sed -i 's|"./|"./__YNH_SUBDIR_PATH__/|g' "./public/manifest.json"
popd

#=================================================
# BUILD
#=================================================
ynh_release_filename="${build_folder}_ynh.zip"
pushd "$build_folder"
    # Call NVM if expected node version differs form current node version
    current_node_version=$(node -v | cut -c 2- | cut -c 1-${#build_node_version})
    if [ "$current_node_version" != "$build_node_version" ]; then
        if [ -f ~/.nvm/nvm.sh ]; then
            source ~/.nvm/nvm.sh install $build_node_version
        else
            echo "Current Node.js version ($current_node_version) not matching building requirement ($build_node_version). Please install expected Node.js version or Node Version Manager (nvm)"
        fi
    fi
    
    # Actual build instructions
    npm ci
    npm run build

    # Package   
    mv "${default_build_folder}" "${ynh_repo}"
    zip -r $ynh_release_filename "${ynh_repo}"
    mv $ynh_release_filename "../${ynh_release_filename}"
popd
ynh_release_SHA=$(sha256sum ${ynh_release_filename} | cut -d' ' -f1)
ynh_release_URL="https://github.com/${ynh_owner}/${ynh_repo}/releases/download/${release_version}/${ynh_release_filename}"
ynh_release_version="${release_version#${upstream_repo}_}" #e.g. v3.2.0 (release source) OR v2024.11.19-d5f9bfc7 (commit source)

#=================================================
# CLEAN BUILD FOLDER
#=================================================
rm -r "${build_folder}"
rm "${build_folder}.tar.gz"

#=================================================
# GENERATE DIFF COMPARE URL
#=================================================
# Get previous manifest version
curl --silent --output previous_manifest.toml "https://raw.githubusercontent.com/${ynh_owner}/${ynh_repo}/refs/heads/master/manifest.toml"

# Extract previous upstream source URL
previous_upstream_url="$(grep -A 5 'resources.sources.upstream' previous_manifest.toml | grep url | grep -o 'http[s]\?://[^ "]\+' | head -1)"
rm previous_manifest.toml

# Get previous commit SHA-1 string 
previous_upstream_filename=${previous_upstream_url##*/}
previous_upstream_filename=${previous_upstream_filename%.tar.gz}
previous_upstream_filename=${previous_upstream_filename%.zip}
if [[ "$previous_upstream_filename" =~ ^[0-9a-f]{40}$ ]] #check if filename is a SHA-1 string or a tag
then 
previous_release_commit_SHA_full=${previous_upstream_filename}
else
previous_release_commit_SHA_full=$(curl --silent "https://api.github.com/repos/${full_upstream_path}/git/refs/tags/" | jq -r ".[] | select(.ref==\"refs/tags/${previous_upstream_filename}\") | .object.sha") 
fi
previous_release_commit_SHA_short=${previous_release_commit_SHA_full:0:8}

# Get current commit SHA-1 string
if [[ "$ynh_release_version" =~ ^v[0-9]{4}\.[0-9]{2}\.[0-9]{2}-[0-9a-f]{8}$ ]] #check if it has commit (predictable) or release (unpredictable) format.
then
current_release_commit_SHA_short=${ynh_release_version##*-}
else
current_release_commit_SHA_full=$(curl --silent "https://api.github.com/repos/${full_upstream_path}/git/refs/tags/" | jq -r ".[] | select(.ref==\"refs/tags/${ynh_release_version}\") | .object.sha") 
current_release_commit_SHA_short=${current_release_commit_SHA_full:0:8}
fi

# Create final URL
ynh_release_diff_url="https://github.com/${full_upstream_path}/compare/${previous_release_commit_SHA_short}...${current_release_commit_SHA_short}"

#=================================================
# UPLOAD RELEASE
#=================================================

# Upload with Github Personal Token (local build, i.e. not running a Github Workflow)
if [[ $gh_personal_token && -z $GITHUB_OUTPUT ]]; then
    
    echo "Trying to upload the release to https://github.com/${ynh_owner}/${ynh_repo}/releases/ ..."

    sha256sumarchive=$(sha256sum "$ynh_release_filename" | cut -d' ' -f1)

    if [[ "$@" =~ "push_release" ]]
    then
        ## Make a draft release json with a markdown body
        release='"tag_name": "'$last_upstream_version'", "target_commitish": "master", "name": "'$last_upstream_version'", '
        body="${upstream_repo^} prebuilt archive for ${ynh_repo}\\n=========\\nPlease refer to upstream ${upstream_repo^} project for the change : https://github.com/$full_upstream_path/releases\\n\\nSha256sum : $sha256sumarchive"
        body=\"$body\"
        body='"body": '$body', '
        release=$release$body
        release=$release'"draft": true, "prerelease": false'
        release='{'$release'}'
        url="https://api.github.com/repos/$ynh_owner/$ynh_repo/releases"
        succ=$(curl -H "Authorization: token $gh_personal_token" --data "$release" $url)

        ## In case of success, we upload a file
        upload_generic=$(echo "$succ" | grep upload_url)
        if [[ $? -eq 0 ]]; then
            echo "Release created."
        else
            echo "Error creating release!"
            return
        fi

        # $upload_generic is like:
        # "upload_url": "https://uploads.github.com/repos/:owner/:repo/releases/:ID/assets{?name,label}",
        upload_prefix=$(echo $upload_generic | cut -d "\"" -f4 | cut -d "{" -f1)
        upload_file="$upload_prefix?name=$ynh_release_filename"

        echo "Start uploading first file"
        i=0
        upload_ok=false
        while [ $i -le 4 ]; do
            i=$((i+1))
            # Download file
            set +e
            succ=$(curl -H "Authorization: token $gh_personal_token" \
                -H "Content-Type: $(file -b --mime-type $ynh_release_filename)" \
                -H "Accept: application/vnd.github.v3+json" \
                --data-binary @$ynh_release_filename $upload_file)
            res=$?
            set -e
            if [ $res -ne 0 ]; then
                echo "Curl upload failled"
                continue
            fi
            echo "Upload done, check result"

            set +eu
            download=$(echo "$succ" | egrep -o "browser_download_url.+?")
            res=$?
            if [ $res -ne 0 ] || [ -z "$download" ]; then
                set -eu
                echo "Result upload error"
                continue
            fi
            set -eu
            echo "$download" | cut -d: -f2,3 | cut -d\" -f2
            echo "Upload OK"
            upload_ok=true
            break
        done
        
        set +x  

        if ! $upload_ok; then
            echo "Upload completely failed, exit"
            exit 1
        fi
    fi

    exit 0

# Script run with Github Workflow or with empty $gh_personal_token
else
    if [[ $GITHUB_OUTPUT ]]; then 
        echo "YNH_RELEASE_FILE=${ynh_release_filename}" >> $GITHUB_OUTPUT
        echo "YNH_RELEASE_SHA=${ynh_release_SHA}" >> $GITHUB_OUTPUT
        echo "YNH_RELEASE_URL=${ynh_release_URL}" >> $GITHUB_OUTPUT
        echo "YNH_RELEASE_VERSION=${ynh_release_version}" >> $GITHUB_OUTPUT
        echo "YNH_RELEASE_DIFF_COMPARE_URL=${ynh_release_diff_url}" >> $GITHUB_OUTPUT
    fi #export var for Github Workflow
    echo "Build completed but not uploaded - missing Github Token"
    set +x 
fi
